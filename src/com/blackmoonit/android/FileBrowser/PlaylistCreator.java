package com.blackmoonit.android.FileBrowser;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Locale;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Parcelable;
import android.view.View;
import android.view.Window;

import com.blackmoonit.app.BitsDialog;
import com.blackmoonit.concurrent.BitsThreadTask;
import com.blackmoonit.content.BitsIntent;
import com.blackmoonit.dialog.DialogFileLocation;
import com.blackmoonit.filesystem.BitsFileUtils;
import com.blackmoonit.filesystem.MIMEtypeMap;

/**
 * Extends the save dialog so that we can create the playlist on save.
 * 
 * @author Ryan Fischbach<br>Blackmoon Info Tech Services - &copy;2010
 */
public class PlaylistCreator extends DialogFileLocation {
	//private static final String TAG = "BITS.FileBrowser.PlaylistCreator";
	
	//fields
	private final MIMEtypeMap mMimeMap = new MIMEtypeMap().createMaps();
	private ArrayList<? extends Parcelable> mUriList = null;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		//setTitle(getString(R.string.act_name_playlist));
		requestWindowFeature(Window.FEATURE_LEFT_ICON);
		super.onCreate(savedInstanceState);
		setFeatureDrawableResource(Window.FEATURE_LEFT_ICON,R.drawable.act_createplaylist);
	}
	
	@Override
	protected void setup(Bundle savedInstanceState) {
		Intent theIntent = getIntent();
		if (theIntent==null) {
			finish();
			return;
		}
		String theAction = theIntent.getAction();
		if (BitsIntent.Intent_ACTION_SEND_MULTIPLE().equals(theAction)) {
			mUriList = theIntent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
		} else {
			finish();
			return;
		}
		//default location
		if (mDefaultFile==null || 
				BitsIntent.isIntentFrom(theIntent,"com.blackmoonit.android.FileBrowser.FileListActivity"))
			mDefaultFile = new File(Environment.getExternalStorageDirectory(),getString(R.string.playlist_foldername));
		//upgraded to default file
		mDefaultFile = BitsFileUtils.getAutoGeneratedFile(mDefaultFile,getString(R.string.default_name_playlist),".m3u");
		super.setup(savedInstanceState);
	}	
	
	@Override
	protected void onPositiveButtonClick(View v) {
		File theFolder = new File(mEditLocationView.getEditableText().toString());
		if (!theFolder.exists() && BitsFileUtils.isExternalStorageMounted())
			theFolder.mkdirs();
		String theFilename = mEditFilenameView.getEditableText().toString();
		if (theFilename==null || theFilename.equals(""))
			theFilename = BitsFileUtils.getAutoGeneratedFileName(theFolder,getString(R.string.default_name_playlist),".m3u");
		else if (!theFilename.toLowerCase(Locale.getDefault()).endsWith(".m3u")) {
			theFilename+=".m3u";
		}
		final File thePlaylist = new File(theFolder,theFilename);
		if (BitsFileUtils.isExternalStorageMounted()) {
			Runnable r = new Runnable() {
				@Override
				public void run() {
					savePlaylist(thePlaylist);
				}
			};
			final BitsThreadTask t = new BitsThreadTask(r);
			t.start();
			finish();
		} else
			BitsDialog.Builder(this)
				.setIcon(android.R.drawable.ic_dialog_alert)
				.show(R.string.action_failed_no_sdcard);				
	}
	
	private void savePlaylist(File aFile) {
		if (aFile==null)
			return;
		try {
	    	FileWriter thePlaylist = new FileWriter(aFile.getPath());
	    	Iterator<? extends Parcelable> audioFiles = mUriList.iterator();
			while (audioFiles.hasNext()) {
				Object theNextItem = audioFiles.next();
				String theFilePath;
				if (theNextItem instanceof Uri) {
					theFilePath = ((Uri)theNextItem).getPath();
				} else if (theNextItem instanceof File) {
					theFilePath = ((File)theNextItem).getPath();
				} else if (theNextItem instanceof String) {
					theFilePath = (String)theNextItem;
				} else {
					theFilePath = null; //list of unknown type, cannot process it
				}
				if (theFilePath!=null)				
					outputAudioFile(thePlaylist,theFilePath);
			}
			thePlaylist.flush();
			thePlaylist.close();
			BitsFileUtils.notifyMediaScanner(PlaylistCreator.this,aFile);
		} catch (Exception e) {
			BitsDialog.ErrDialog(PlaylistCreator.this,e);
		}
		
	}

	private void outputAudioFile(FileWriter aPlaylist, String aFilePath) throws IOException {
		File aAudioFile = new File(aFilePath);
		if (!aAudioFile.isHidden()) {
			if (aAudioFile.isDirectory()) {
				for (File f : aAudioFile.listFiles()) {
					outputAudioFile(aPlaylist,f.getPath());
				}
			} else if (mMimeMap.isCategory("audio",aAudioFile)) {
				aPlaylist.append(aFilePath+"\n");
			}
		}
	}

}
